document.addEventListener('DOMContentLoaded', () => {

    // --- Navbar Toggle para m√≥viles ---
    const menuToggle = document.querySelector('.menu-toggle');
    const navLinks = document.querySelector('.nav-links');

    if (menuToggle && navLinks) {
        menuToggle.addEventListener('click', () => {
            navLinks.classList.toggle('active');
            menuToggle.classList.toggle('active');
        });

        document.addEventListener('click', (event) => {
            if (!navLinks.contains(event.target) && !menuToggle.contains(event.target)) {
                navLinks.classList.remove('active');
                menuToggle.classList.remove('active');
            }
        });
    }

    // --- Carrusel de Im√°genes (Flota) - ADAPTADO DE TU C√ìDIGO ANTIGUO (clientWidth) ---
    // Usaremos la l√≥gica que ya ten√≠as para carrusel en tus archivos anteriores que usaba clientWidth,
    // ya que es m√°s probable que sea la que ten√≠as funcionando bien con tu CSS.
    const carouselSlide = document.querySelector('.carousel-slide');
    const carouselImages = document.querySelectorAll('.carousel-slide img');
    const prevBtn = document.querySelector('.prev-btn');
    const nextBtn = document.querySelector('.next-btn');

    if (carouselSlide && carouselImages.length > 0 && prevBtn && nextBtn) { // Asegura que existan
        let counter = 0;
        const size = carouselImages[0].clientWidth; // Usar clientWidth

        // Inicializar carrusel en la primera imagen (por si acaso el CSS no lo hace)
        carouselSlide.style.transform = 'translateX(' + (-size * counter) + 'px)';

        nextBtn.addEventListener('click', () => {
            if (counter >= carouselImages.length - 1) {
                counter = -1; // Reinicia para ir al principio l√≥gicamente
            }
            counter++;
            carouselSlide.style.transition = 'transform 0.5s ease-in-out';
            carouselSlide.style.transform = 'translateX(' + (-size * counter) + 'px)';
        });

        prevBtn.addEventListener('click', () => {
            if (counter <= 0) {
                counter = carouselImages.length; // Reinicia para ir al final l√≥gicamente
            }
            counter--;
            carouselSlide.style.transition = 'transform 0.5s ease-in-out';
            carouselSlide.style.transform = 'translateX(' + (-size * counter) + 'px)';
        });
    }


    // --- L√≥gica del Formulario de Contacto ---
    const contactForm = document.getElementById('contact-form');
    const contactMessage = document.getElementById('contact-message');

    if (contactForm) {
        contactForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            contactMessage.textContent = 'Enviando mensaje...';
            contactMessage.style.color = 'var(--accent-color)'; 

            const formData = new FormData(contactForm);
            const data = Object.fromEntries(formData.entries());

            console.log('Datos del formulario de contacto:', data);

            await new Promise(resolve => setTimeout(resolve, 1500));

            contactMessage.textContent = '¬°Mensaje enviado con √©xito! (Simulado). Nos pondremos en contacto contigo pronto.';
            contactMessage.style.color = 'green';
            contactForm.reset();

            setTimeout(() => {
                contactMessage.textContent = '';
            }, 5000);
        });
    }

    // --- L√≥gica del Chatbot ---
    // IMPORTANTE: Aseg√∫rate de que los elementos del chatbot existan en el HTML desde el inicio.
    // NO los generes con innerHTML dentro del JS.
    const chatbotButton = document.getElementById('chatbot-button'); // Bot√≥n para abrir/cerrar el chatbot
    const chatbotContainer = document.getElementById('chatbot-container'); // Contenedor principal del chatbot
    const chatInput = document.getElementById('chat-input'); // Campo de entrada de texto del chatbot
    const sendChatBtn = document.getElementById('send-chat-btn'); // Bot√≥n para enviar mensaje del chatbot
    const chatMessages = document.getElementById('chat-messages'); // Contenedor de mensajes del chatbot

    if (chatbotButton && chatbotContainer && chatInput && sendChatBtn && chatMessages) {
        chatbotContainer.style.display = 'none'; // Asegura que est√© oculto al inicio

        chatbotButton.addEventListener('click', () => {
            const isHidden = chatbotContainer.style.display === 'none' || chatbotContainer.style.display === '';
            chatbotContainer.style.display = isHidden ? 'flex' : 'none';
            
            if (isHidden) {
                chatInput.focus(); // Enfocar el input al abrir
                chatMessages.scrollTop = chatMessages.scrollHeight; // Desplazar al final
            }
            // Puedes cambiar el texto/icono del bot√≥n aqu√≠ si lo deseas
            // chatbotButton.textContent = isHidden ? '‚úñ' : 'üí¨'; 
        });

        sendChatBtn.addEventListener('click', sendMessage);
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        function sendMessage() {
            const userInput = chatInput.value.trim();
            if (userInput === '') return;

            const userMessageDiv = document.createElement('p');
            userMessageDiv.classList.add('user-message');
            userMessageDiv.textContent = userInput;
            chatMessages.appendChild(userMessageDiv);

            chatInput.value = '';

            chatMessages.scrollTop = chatMessages.scrollHeight;

            setTimeout(() => {
                const botResponse = getBotResponse(userInput);
                const botMessageDiv = document.createElement('p');
                botMessageDiv.classList.add('bot-message');
                botMessageDiv.innerHTML = botResponse; // Usar innerHTML para enlaces
                chatMessages.appendChild(botMessageDiv);

                chatMessages.scrollTop = chatMessages.scrollHeight;
            }, 500);
        }

        function getBotResponse(message) {
            message = message.toLowerCase();

            if (/(hola|saludos)/.test(message)) {
                return "¬°Hola! ¬øEn qu√© puedo ayudarte hoy?";
            } else if (/(mision|vision|esencia)/.test(message)) {
                return "Nuestra Misi√≥n es ofrecer un servicio especializado con calidad, confiabilidad y seguridad, buscando la continuidad comercial a largo plazo. Nuestra Visi√≥n es consolidarnos como empresa l√≠der en el transporte de contenedores, reconocida por su eficiencia e innovaci√≥n. Para m√°s informaci√≥n, visita nuestra secci√≥n de <a href='#mision'>Misi√≥n y Visi√≥n</a>.";
            } else if (/(flota|camiones|unidades)/.test(message)) {
                return "Contamos con 17 unidades: 11 sencillos, 5 full expandibles y 6 cajas secas. Para ver la flota completa, visita nuestra secci√≥n de <a href='#flota'>Flota</a>.";
            } else if (/(rastreo|seguridad|monitoreo|satelital)/.test(message)) {
                return "Ofrecemos monitoreo satelital 24/7 con rastreo en tiempo real y apagado remoto de unidades en caso de robo. Trabajamos con ELITE, Zapata Aeropuerto, FREIT y PROTRACK. Para m√°s detalles, visita nuestra secci√≥n de <a href='#rastreo'>Rastreo Satelital</a>.";
            } else if (/(cobertura|donde operan|ciudades|nacional)/.test(message)) {
                return "Realizamos servicios de transporte a toda la Rep√∫blica Mexicana. Para m√°s informaci√≥n, visita nuestra secci√≥n de <a href='#cobertura'>Cobertura</a>.";
            } else if (/(patios|ubicacion|tepotzotlan|manzanillo|operaciones)/.test(message)) {
                return "Tenemos patios de operaciones en Tepotzotl√°n, Estado de M√©xico y en Manzanillo, Colima. Para ver sus ubicaciones y mapas, visita nuestra secci√≥n de <a href='#patios'>Patios</a>.";
            } else if (/(contacto|cotizacion|telefono|email|contactar|llamar)/.test(message)) {
                return "Puedes contactarnos a trav√©s de nuestro <a href='#contacto'>formulario de Contacto</a>, o llamar a Fernando Lucas al <a href='tel:+525516273406'>5516273406</a> o a Armando Martinez al <a href='tel:+525542639390'>5542639390</a>. Tambi√©n puedes enviar un correo a <a href='mailto:jiva.operaciones@gmail.com'>jiva.operaciones@gmail.com</a>.";
            } else if (/(privacidad|politicas|aviso)/.test(message)) {
                return "Nuestras <a href='#privacidad'>pol√≠ticas de privacidad</a> detallan c√≥mo recopilamos y protegemos tus datos personales. Puedes revisarlas completas en la secci√≥n de Privacidad de la p√°gina.";
            } else if (/(servicios)/.test(message)) {
                return "Ofrecemos transporte de carga contenerizada, transporte en caja seca, log√≠stica de contenedores 20 y 40 pies, rastreo satelital y transporte seguro de mercanc√≠a. Para ver todos nuestros servicios, visita la secci√≥n de <a href='#servicios'>Nuestros Principales Servicios</a>.";
            } else if (/(presentacion|qr|pdf|descargar)/.test(message)) {
                 return "Puedes ver nuestra presentaci√≥n completa en PDF escaneando el c√≥digo QR en la secci√≥n <a href='#qr-section'>Nuestra Presentaci√≥n en QR</a>";
            } else if (/(gracias|adios|bye)/.test(message)) {
                return "¬°De nada! Si tienes m√°s preguntas, no dudes en consultar. ¬°Hasta luego!";
            } else {
                return "Lo siento, no entend√≠ tu pregunta. Por favor, intenta de nuevo o reformula. Puedes preguntar sobre:<br> \"Misi√≥n\", \"Flota\", \"Rastreo\", \"Cobertura\", \"Patios\", \"Contacto\", \"Privacidad\", \"Servicios\" o \"Presentaci√≥n\".";
            }
        }
    } // Fin del if(chatbotButton && ...)


    // --- L√≥gica de NAVEGACI√ìN por Voz (Reincorporada de tu c√≥digo antiguo que funcionaba) ---
    const voiceNavToggleBtn = document.getElementById('voice-command-toggle'); // ID del bot√≥n de voz para navegaci√≥n

    if (voiceNavToggleBtn) { // Solo ejecutar si el bot√≥n existe
        // Verificar soporte para la Web Speech API
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition;

        if (!SpeechRecognition) {
            console.warn('La API de reconocimiento de voz no es soportada en este navegador. El bot√≥n de voz ser√° ocultado.');
            voiceNavToggleBtn.style.display = 'none'; // Ocultar el bot√≥n si no hay soporte
            return; // Salir de esta secci√≥n de voz si no hay soporte
        }

        const recognition = new SpeechRecognition();
        recognition.lang = 'es-MX'; // Ajustado a es-MX para mejor precisi√≥n en M√©xico
        recognition.interimResults = false;
        recognition.maxAlternatives = 1;
        recognition.continuous = false; // Escucha una sola frase por activaci√≥n

        // Funci√≥n auxiliar para desplazar a una secci√≥n
        const scrollToSection = (id) => {
            const section = document.getElementById(id);
            if (section) {
                section.scrollIntoView({ behavior: 'smooth' });
                console.log(`Navegando a la secci√≥n: ${id}`);
            } else {
                console.warn(`La secci√≥n con ID "${id}" no se encontr√≥.`);
                alert(`Lo siento, la secci√≥n "${id.replace('#', '')}" no se encontr√≥.`);
            }
        };

        voiceNavToggleBtn.addEventListener('click', () => {
            try {
                recognition.start();
                voiceNavToggleBtn.textContent = 'Escuchando...';
                voiceNavToggleBtn.classList.add('listening'); // A√±adir clase para estilos CSS
                console.log('‚úÖ Reconocimiento de voz para navegaci√≥n iniciado.');
            } catch (e) {
                console.error('Error al iniciar el reconocimiento de voz para navegaci√≥n:', e);
                voiceNavToggleBtn.textContent = 'Voz';
                voiceNavToggleBtn.classList.remove('listening');
                let errorMessage = 'No se pudo iniciar el reconocimiento de voz.';
                if (e.name === 'InvalidStateError') {
                    errorMessage += ' Parece que ya est√° activo o se intent√≥ iniciar mientras estaba en un estado inv√°lido.';
                    // Intentar detener y reiniciar si es un InvalidStateError
                    recognition.stop();
                    setTimeout(() => { // Peque√±a pausa para permitir que se detenga completamente
                        try {
                            recognition.start();
                        } catch (retryError) {
                            console.error('Error al reintentar iniciar el reconocimiento:', retryError);
                            alert(errorMessage + ' Intenta de nuevo.');
                        }
                    }, 100);
                    return; // Salir para evitar alert duplicado si se reintenta
                } else if (e.name === 'SecurityError') {
                    errorMessage += ' Aseg√∫rate de estar en un contexto seguro (HTTPS o localhost) y de haber dado permisos al micr√≥fono.';
                }
                alert(errorMessage);
            }
        });

        recognition.onresult = (event) => {
            const transcript = event.results[0][0].transcript.toLowerCase();
            console.log('Comando de voz detectado para navegaci√≥n:', transcript);
            voiceNavToggleBtn.textContent = 'Voz';
            voiceNavToggleBtn.classList.remove('listening');

            // --- L√≥gica de comandos de navegaci√≥n directa ---
            if (transcript.includes('inicio') || transcript.includes('ir a inicio') || transcript.includes('principal')) {
                scrollToSection('inicio');
            } else if (transcript.includes('misi√≥n') || transcript.includes('mision y vision') || transcript.includes('esencia')) {
                scrollToSection('mision');
            } else if (transcript.includes('flota') || transcript.includes('camiones') || transcript.includes('unidades')) {
                scrollToSection('flota');
            } else if (transcript.includes('rastreo') || transcript.includes('satelital') || transcript.includes('monitoreo')) {
                scrollToSection('rastreo');
            } else if (transcript.includes('cobertura') || transcript.includes('nacional')) {
                scrollToSection('cobertura');
            } else if (transcript.includes('patios') || transcript.includes('operaciones')) {
                scrollToSection('patios');
            } else if (transcript.includes('contacto') || transcript.includes('contactar') || transcript.includes('llamar')) {
                scrollToSection('contacto');
            } else if (transcript.includes('privacidad') || transcript.includes('politicas de privacidad') || transcript.includes('aviso de privacidad')) {
                scrollToSection('privacidad');
            } else if (transcript.includes('presentaci√≥n') || transcript.includes('descargar presentaci√≥n') || transcript.includes('qr')) {
                // Aqu√≠, si la secci√≥n de presentaci√≥n tiene un ID, √∫salo. Si es una clase, ajusta.
                // Asumiendo que la secci√≥n de QR/PDF tiene el ID 'qr-section'
                scrollToSection('qr-section');
            } else if (transcript.includes('servicios')) { // A√±adido para completar los comandos
                scrollToSection('servicios');
            }
            else {
                alert('Comando de voz no reconocido para navegaci√≥n: "' + transcript + '". Por favor, intenta de nuevo con un comando como "Inicio", "Flota" o "Contacto".');
            }
        };

        recognition.onerror = (event) => {
            console.error('Error de reconocimiento de voz para navegaci√≥n:', event.error, event.message);
            voiceNavToggleBtn.textContent = 'Voz';
            voiceNavToggleBtn.classList.remove('listening');
            if (event.error === 'not-allowed') {
                alert('Permiso de micr√≥fono denegado para comandos de voz. Revisa la configuraci√≥n de tu navegador (haz clic en el candado en la barra de direcciones).');
            } else if (event.error === 'no-speech') {
                console.log('No se detect√≥ voz para comando de navegaci√≥n.');
            } else {
                alert('Ocurri√≥ un error en el reconocimiento de voz para navegaci√≥n: ' + event.error);
            }
        };

        recognition.onend = () => {
            voiceNavToggleBtn.textContent = 'Voz';
            voiceNavToggleBtn.classList.remove('listening');
            console.log('üîö Reconocimiento de voz para navegaci√≥n finalizado.');
        };

    } else {
        console.warn('El bot√≥n con ID "voice-command-toggle" no se encontr√≥, la navegaci√≥n por voz no se activar√°.');
        // Puedes agregar un mensaje al usuario en el HTML si lo necesitas
    }

    // --- L√≥gica para desplazamiento suave de enlaces de ancla (general) ---
    // Esta l√≥gica se aplica a cualquier enlace con href que empiece con #
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            // Si el chatbot est√° abierto y el clic viene de un enlace DENTRO del chatbot
            // (como los que generas en el botResponse), querr√°s cerrarlo.
            // Para eso necesitas que el bot√≥n del chatbot tenga un ID √∫nico (e.g., 'chatbot-button')
            // y que el contenedor del chatbot tambi√©n tenga un ID (e.g., 'chatbot-container').
            const chatbotContainerEl = document.getElementById('chatbot-container');
            if (chatbotContainerEl && chatbotContainerEl.style.display === 'flex') {
                // Si el evento original (e.target) es un enlace dentro del chatbot
                if (e.target.closest('#chatbot-container')) {
                     chatbotContainerEl.style.display = 'none'; // Cierra el chatbot
                }
            }
            document.querySelector(targetId).scrollIntoView({
                behavior: 'smooth'
            });
        });
    });

}); // Fin de document.addEventListener('DOMContentLoaded')
